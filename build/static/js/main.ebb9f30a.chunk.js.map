{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","waveLength","setWaveLength","loading","setLoading","message","setMessage","errorMessage","setErrorMessage","contractABI","wavePortal","abi","connectWallet","a","window","ethereum","alert","request","method","accounts","console","log","checkIfWalletIsConnected","length","account","getAllWaves","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","on","from","prevState","getTotalWaves","count","toNumber","waveMessage","gasLimit","waveTxn","hash","wait","useEffect","className","style","fontWeight","onSubmit","e","preventDefault","Error","target","reset","error","rows","cols","name","placeholder","onChange","value","trim","type","disabled","onClick","textAlign","map","index","key","toString","ReactDOM","render","document","getElementById"],"mappings":"8urBAKe,SAASA,IAItB,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAA8BR,mBAAS,IAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAAwCV,oBAAS,GAAjD,mBAAOW,EAAP,KAAqBC,EAArB,KAMMC,EAAcC,EAAWC,IAKzBC,EAAa,uCAAG,gCAAAC,EAAA,oEAEGC,OAAbC,EAFU,EAEVA,SAFU,uBAKhBC,MAAM,iBALU,0CASKD,EAASE,QAAQ,CACtCC,OAAQ,wBAVQ,OASZC,EATY,OAalBC,QAAQC,IAAI,YAAaF,EAAS,IAClCrB,EAAkBqB,EAAS,IAdT,kDAgBlBC,QAAQC,IAAR,MAhBkB,0DAAH,qDAoBbC,EAAwB,uCAAG,kCAAAT,EAAA,oEAERC,OAAbC,EAFqB,EAErBA,SAFqB,uBAK3BK,QAAQC,IAAI,gCALe,0BAQ3BD,QAAQC,IAAI,8BAA+BN,GARhB,wBAcNA,EAASE,QAAQ,CAAEC,OAAQ,iBAdrB,QAgBL,KAFlBC,EAduB,QAgBhBI,QACLC,EAAUL,EAAS,GACzBC,QAAQC,IAAI,+BAAgCG,GAC5C1B,EAAkB0B,IAElBJ,QAAQC,IAAI,+BArBe,kDAwB7BD,QAAQC,IAAR,MAxB6B,0DAAH,qDA4BxBI,EAAW,uCAAG,0CAAAZ,EAAA,2DACGC,OAAbC,EADU,EACVA,SADU,UAIZA,EAJY,wBAKRW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SA7DpB,6CA+DhBxB,EACAqB,GAVY,SAaME,EAAmBP,cAbzB,cAaRS,EAbQ,OAeVC,EAAe,GACnBD,EAAME,SAAQ,SAACC,GACbF,EAAaG,KAAK,CAChBC,QAASF,EAAKG,MACdC,UAAW,IAAIC,KAAsB,IAAjBL,EAAKI,WACzBpC,QAASgC,EAAKhC,aAIlBL,EAAYmC,GAEZH,EAAmBW,GAAG,WAAW,SAACC,EAAMH,EAAWpC,GACjDe,QAAQC,IAAI,UAAWuB,EAAMH,EAAWpC,GAExCL,GAAY,SAAC6C,GAAD,4BACPA,GADO,CAEV,CACEN,QAASK,EACTH,UAAW,IAAIC,KAAiB,IAAZD,GACpBpC,QAASA,WAlCD,UAuCI2B,EAAmBc,gBAvCvB,QAuCVC,EAvCU,OAwCd7C,EAAc6C,EAAMC,YAxCN,wBA0Cd5B,QAAQC,IAAI,kCA1CE,0DA6ChBD,QAAQC,IAAR,MA7CgB,0DAAH,qDAiDXgB,EAAI,uCAAG,WAAOY,GAAP,2BAAApC,EAAA,oEAEYC,SAAbC,EAFC,EAEDA,UAFC,wBAKDW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SA9GpB,6CAgHhBxB,EACAqB,GAGF1B,GAAW,GAbJ,SAeW4B,EAAmBc,gBAf9B,cAeHC,EAfG,OAgBP3B,QAAQC,IAAI,gCAAiC0B,EAAMC,YAhB5C,UAkBehB,EAAmBK,KAAKY,EAAa,CACzDC,SAAU,MAnBL,eAkBDC,EAlBC,OAqBP/B,QAAQC,IAAI,YAAa8B,EAAQC,MArB1B,UAuBDD,EAAQE,OAvBP,eAwBPjC,QAAQC,IAAI,YAAa8B,EAAQC,MAxB1B,UA0BOpB,EAAmBc,gBA1B1B,QA0BPC,EA1BO,OA2BP3B,QAAQC,IAAI,gCAAiC0B,EAAMC,YA3B5C,wBA6BP5B,QAAQC,IAAI,kCA7BL,0DAgCTD,QAAQC,IAAI,KAAMhB,SAClBW,MACE,sGAlCO,yBAqCTZ,GAAW,GArCF,6EAAH,sDA6CVkD,qBAAU,WACRhC,IACAG,MAEC,CAACxB,IAmBJ,OACE,yBAAKsD,UAAU,iBACb,yBAAKA,UAAU,iBACb,0BAAMA,UAAU,UAAhB,eAEA,yBAAKA,UAAU,OAAf,oDACoD,IAClD,0BAAMC,MAAO,CAAEC,WAAY,QAA3B,yBAFF,mCAMA,yBAAKF,UAAU,IACb,0BAAMA,UAAU,gBAAgBG,SA7BnB,SAACC,GACpBA,EAAEC,iBACF,IAEE,GAAgB,KAAZvD,EAAgB,MAAMwD,MAAM,SAEhCzC,QAAQC,IAAIhB,GACZG,GAAgB,GAEhB6B,EAAKhC,GACLsD,EAAEG,OAAOC,QACT,MAAOC,GACP5C,QAAQC,IAAI2C,GACZxD,GAAgB,MAiBV,8BACEyD,KAAK,IACLC,KAAK,KACLC,KAAK,UACLZ,UAAU,YACVa,YAAY,wBACZC,SAAU,SAACV,GAAD,OAAOrD,EAAWqD,EAAEG,OAAOQ,MAAMC,WAG7C,4BACEhB,UAAU,aACViB,KAAK,SACLC,SAAUtE,GAAuB,KAAZE,GAEpBF,EAAU,aAAe,gBAG7BI,GAAgB,uDAMjBV,GACA,4BAAQ0D,UAAU,gBAAgBmB,QAAS9D,GAA3C,kBAKDX,EAAa,GACZ,uBAAGuD,MAAO,CAAEmB,UAAW,WAAvB,6BAC6B1E,EAD7B,WAKDF,EAAS6E,KAAI,SAACvC,EAAMwC,GACnB,OACE,yBAAKC,IAAKD,EAAOtB,UAAU,mBACzB,yCAAelB,EAAKE,SACpB,sCAAYF,EAAKI,UAAUsC,YAC3B,yCAAe1C,EAAKhC,eC9OlC2E,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ebb9f30a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport wavePortal from \"./utils/WavePortal.json\";\n\nexport default function App() {\n  /*\n   * Just a state variable we use to store our user's public wallet.\n   */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  const [waveLength, setWaveLength] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(false);\n\n  /**\n   * Create a variable here that holds the contract address after you deploy!\n   */\n  const contractAddress = \"0x2362401Ed1DE68d3164916ACE827229eB1aC35D1\";\n  const contractABI = wavePortal.abi;\n\n  /**\n   * Implement your connectWallet method here\n   */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      /*\n       * Check if we're authorized to access the user's wallet\n       */\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getAllWaves = async () => {\n    const { ethereum } = window;\n\n    try {\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        const waves = await wavePortalContract.getAllWaves();\n\n        let wavesCleaned = [];\n        waves.forEach((wave) => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          });\n        });\n\n        setAllWaves(wavesCleaned);\n\n        wavePortalContract.on(\"NewWave\", (from, timestamp, message) => {\n          console.log(\"NewWave\", from, timestamp, message);\n\n          setAllWaves((prevState) => [\n            ...prevState,\n            {\n              address: from,\n              timestamp: new Date(timestamp * 1000),\n              message: message,\n            },\n          ]);\n        });\n\n        let count = await wavePortalContract.getTotalWaves();\n        setWaveLength(count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const wave = async (waveMessage) => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        setLoading(true);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave(waveMessage, {\n          gasLimit: 300000,\n        });\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error.message);\n      alert(\n        \"Looks like the transaction failed. If you have recently waved, please wait 15mins to wave again :)\"\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /*\n   * This runs our function when the page loads.\n   */\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    getAllWaves();\n    // eslint-disable-next-line\n  }, [waveLength]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    try {\n      //Check if message is empty\n      if (message === \"\") throw Error(\"Empty\");\n\n      console.log(message);\n      setErrorMessage(false);\n      //send wave with custom message and clear text area\n      wave(message);\n      e.target.reset();\n    } catch (error) {\n      console.log(error);\n      setErrorMessage(true);\n    }\n  };\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <span className=\"header\"> Hey there!</span>\n\n        <div className=\"bio\">\n          I am Mohamed, connect your Ethereum wallet on the{\" \"}\n          <span style={{ fontWeight: \"500\" }}>Rinkeby Test Network </span> and\n          wave at me with a message!\n        </div>\n\n        <div className=\"\">\n          <form className=\"formContainer\" onSubmit={handleSubmit}>\n            <textarea\n              rows=\"5\"\n              cols=\"50\"\n              name=\"message\"\n              className=\"form-text\"\n              placeholder=\"Enter your message...\"\n              onChange={(e) => setMessage(e.target.value.trim())}\n            ></textarea>\n\n            <button\n              className=\"waveButton\"\n              type=\"submit\"\n              disabled={loading || message === \"\"}\n            >\n              {loading ? \"Waving....\" : \"Wave at me!\"}\n            </button>\n          </form>\n          {errorMessage && <p>Enter a valid message!</p>}\n        </div>\n\n        {/*\n         * If there is no currentAccount render this button\n         */}\n        {!currentAccount && (\n          <button className=\"connectWallet\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {waveLength > 0 && (\n          <p style={{ textAlign: \"center\" }}>\n            There has been a total of {waveLength} waves!\n          </p>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} className=\"waveMessageCard\">\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}